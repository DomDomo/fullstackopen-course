{"version":3,"sources":["services/persons.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","updatedPerson","put","delete","Notification","props","stateMessage","className","type","message","Filter","value","newSearch","onChange","handleChange","PersonForm","onSubmit","newName","handleNameChange","newNumber","handleNumberChange","Person","person","name","number","onClick","deletePerson","Persons","people","map","key","App","useState","persons","setPersons","setNewName","setNewNumber","setNewSearch","setStateMessage","useEffect","personsService","addStateMessage","setTimeout","peopleToShow","filter","toLowerCase","startsWith","event","target","preventDefault","includes","window","confirm","newPerson","find","p","returnedPerson","catch","error","console","createdPerson","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a98b2cfc.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = \"/api/persons\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst createPerson = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst updatePerson = (id, updatedPerson) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, updatedPerson)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, createPerson, updatePerson, deletePerson}","import React, { useState, useEffect } from \"react\";\r\nimport personsService from './services/persons';\r\nimport './index.css'\r\n\r\nconst Notification = (props) => {\r\n  if (props.stateMessage === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={props.stateMessage.type}>\r\n      {props.stateMessage.message}\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Filter = (props) => {\r\n  return (\r\n    <p>\r\n      filter shown with\r\n      <input value={props.newSearch} onChange={props.handleChange} />\r\n    </p>\r\n  );\r\n};\r\n\r\nconst PersonForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.onSubmit}>\r\n      <div>\r\n        name: <input value={props.newName} onChange={props.handleNameChange} />\r\n        <br />\r\n        number:{\" \"}\r\n        <input value={props.newNumber} onChange={props.handleNumberChange} />\r\n      </div>\r\n      <div>\r\n        <button type=\"submit\">add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst Person = (props) => (\r\n  <p>{props.person.name} {props.person.number} <button onClick={props.deletePerson}>delete</button></p>\r\n);\r\n\r\nconst Persons = (props) => {\r\n  return (\r\n    <div>\r\n      {props.people.map((person) => (\r\n        <Person key={person.id} person={person} deletePerson={() => props.deletePerson(person)}/>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst App = () => {\r\n  const [persons, setPersons] = useState([]);\r\n  const [newName, setNewName] = useState(\"\");\r\n  const [newNumber, setNewNumber] = useState(\"\");\r\n  const [newSearch, setNewSearch] = useState(\"\");\r\n  const [stateMessage, setStateMessage] = useState({});\r\n\r\n  useEffect(() => {\r\n    personsService\r\n    .getAll()\r\n    .then(persons => {\r\n      setPersons(persons)\r\n    });\r\n  }, []);\r\n\r\n  const handleSearchChange = (event) => {\r\n    setNewSearch(event.target.value);\r\n  };\r\n\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value);\r\n  };\r\n\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value);\r\n  };\r\n\r\n  const addStateMessage = (message) => {\r\n    setStateMessage(message);\r\n\r\n    setTimeout(() => {\r\n      setStateMessage(null)\r\n    }, 5000)\r\n  }\r\n\r\n  const deletePerson = (person) => {\r\n    if(!(window.confirm(`Delete ${person.name} ?`))) return;\r\n\r\n    personsService\r\n      .deletePerson(person.id)\r\n      .then(() => {\r\n        setPersons(persons.filter(p => p.id !== person.id ));\r\n      })\r\n      .then(() => {\r\n        const message = {\r\n          message: `Deleted ${person.name}`,\r\n          type: \"success\"\r\n        }\r\n        addStateMessage(message);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        const message = {\r\n          message: `Information of ${person.name} has already been removed from the server`,\r\n          type: \"error\"\r\n        }\r\n        addStateMessage(message);\r\n        setPersons(persons.filter(p => p.id !== person.id));\r\n      })\r\n  };\r\n\r\n  \r\n\r\n  const addPerson = (event) => {\r\n    event.preventDefault();\r\n\r\n    const duplicateName = persons\r\n      .map((person) => person.name)\r\n      .includes(newName);\r\n\r\n    if (duplicateName) {\r\n      if(!(window.confirm(\r\n      `${newName} is already added to the phonebook, do you want to replace the old number with a new one?`\r\n      )))return;\r\n\r\n      const newPerson = {\r\n        name: newName,\r\n        number: newNumber,\r\n      }\r\n\r\n      const person = persons.find((p) => p.name === newName);\r\n\r\n      personsService\r\n      .updatePerson(person.id, newPerson)\r\n      .then(returnedPerson => {\r\n        setPersons(persons.map(p => p.id !== returnedPerson.id ? p : returnedPerson))\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n      })\r\n      .then(() => {\r\n        const message = {\r\n          message: `Updated ${newName}`,\r\n          type: \"success\"\r\n        }\r\n        addStateMessage(message);\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        const message = {\r\n          message: `Information of ${person.name} has already been removed from the server`,\r\n          type: \"error\"\r\n        }\r\n        addStateMessage(message);\r\n        setPersons(persons.filter(p => p.id !== person.id));\r\n      })\r\n\r\n      \r\n    } else {\r\n      const newPerson = {\r\n        name: newName,\r\n        number: newNumber,\r\n      }\r\n\r\n      personsService\r\n      .createPerson(newPerson)\r\n      .then(createdPerson => {\r\n        setPersons(persons.concat(createdPerson));\r\n        setNewName(\"\");\r\n        setNewNumber(\"\");\r\n      }).then(() => {\r\n        const message = {\r\n          message: `Added ${newName}`,\r\n          type: \"success\"\r\n        }\r\n        addStateMessage(message);\r\n      })\r\n      \r\n    }\r\n  };\r\n\r\n  const peopleToShow = newSearch\r\n    ? persons.filter((person) =>\r\n        person.name.toLowerCase().startsWith(newSearch.toLowerCase())\r\n      )\r\n    : persons;\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification stateMessage={stateMessage}/>\r\n      <Filter value={newSearch} handleChange={handleSearchChange} />\r\n      <h3>Add a new</h3>\r\n      <PersonForm\r\n        onSubmit={addPerson}\r\n        newName={newName}\r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange}\r\n      />\r\n      <h3>Numbers</h3>\r\n      <Persons people={peopleToShow} deletePerson={deletePerson}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}